<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>sak96-blog</title><link href="https://sak96.github.io/" rel="alternate"></link><link href="https://sak96.github.io/feeds/all.atom.xml" rel="self"></link><id>https://sak96.github.io/</id><updated>2021-11-09T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Vim Wiki Setup</title><link href="https://sak96.github.io/vim-wiki-setup.html" rel="alternate"></link><published>2021-11-09T00:00:00+00:00</published><updated>2021-11-09T00:00:00+00:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2021-11-09:/vim-wiki-setup.html</id><summary type="html">&lt;p&gt;This article explains my vim wiki setup.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Why Keep Notes?&lt;/h2&gt;
&lt;p&gt;Note taking helps in process of learning new material.
The process of writing notes forces you to summarise what you learned.
The notes may be used later to revise or recollect facts.
It also helps to organise thoughts.&lt;/p&gt;
&lt;p&gt;My reasoning of using notes was only to force me to summarise materials.
I never wrote my notes for the purpose of recollection.
This usually happened due to my laziness to write legibly or maintaining notes.&lt;/p&gt;
&lt;p&gt;As my interaction with computer increased, typing became second nature.
This also meant I could easily transfer data around devices.
Thus I stared using Joplin as a tool for storing my notes.&lt;/p&gt;
&lt;h2&gt;Vim Wiki&lt;/h2&gt;
&lt;p&gt;Joplin worked fine for taking notes.
It could sync between android and my laptop.
It also had vim key binding integration.
It also had a command line interface.&lt;/p&gt;
&lt;p&gt;I still decided to move to vim wiki.
It was simple setup and the data was versioned.
And I could parse the data as and when required.
Installation was also simple via &lt;code&gt;vim-plug&lt;/code&gt;.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Plug &lt;span class="s1"&gt;&amp;#39;vimwiki/vimwiki&amp;#39;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Markdown format&lt;/h2&gt;
&lt;h3&gt;Enabling markdown&lt;/h3&gt;
&lt;p&gt;By default vim wiki has it own format of data.
But it also support markdown syntax by setting following.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_syntax &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_ext &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;Generating Html From Markdown&lt;/h3&gt;
&lt;p&gt;Vim wiki support conversion of notes to html artifacts.
But markdown syntax is not supported for this feature.
The only way to make it work is to use custom program like &lt;code&gt;vimwiki_markdown&lt;/code&gt;.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; executable&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vimwiki_markdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_custom_wiki2html &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vimwiki_markdown&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_template_path &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~/.wiki_template/&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The above code sets up &lt;code&gt;vimwiki_markdown&lt;/code&gt; as html generator.
Custom template can be provided which is placed in &lt;code&gt;~/.wiki_template/default.tpl&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;syntax highlight&lt;/h3&gt;
&lt;p&gt;Syntax highlighting is not enabled by default.
It can be set explicitly.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_automatic_nested_syntaxes &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Only certain language can also be set.
This also can be used to map syntax highlight as you please.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_nested_syntaxes &lt;span class="p"&gt;=&lt;/span&gt; {&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c++&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;cpp&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Folder Hierarchy&lt;/h2&gt;
&lt;p&gt;Organizing notes into folder hierarchy can be helpful.
This might help classifying notes into broad categories.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_list &lt;span class="p"&gt;=&lt;/span&gt; [
      \ {&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;}&lt;span class="p"&gt;,&lt;/span&gt;
      \ {&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;language/py/&amp;#39;&lt;/span&gt;}&lt;span class="p"&gt;,&lt;/span&gt;
      \ {&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;rust&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;language/rs/&amp;#39;&lt;/span&gt;}&lt;span class="p"&gt;,&lt;/span&gt;
      \ {&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;software&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;software/&amp;#39;&lt;/span&gt;}&lt;span class="p"&gt;,&lt;/span&gt;
      \ ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;Better links&lt;/h3&gt;
&lt;p&gt;Using spaces in link might some time cause issues.
Underscores can be used instead.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_links_space_char &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;Better Indexes For Vim Wiki&lt;/h3&gt;
&lt;p&gt;Vim wiki allows generating of link and creating of wiki for that file.
But in case you use &lt;code&gt;/&lt;/code&gt; at the it does opens directory but not index file.
Index file can be made default for directory.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_dir_link &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Diary Usage&lt;/h2&gt;
&lt;p&gt;Vim wiki also allows diary creation.
To have different diary for different machine we can use host name.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_diary_rel_path &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dairy_&amp;#39;&lt;/span&gt;.hostname&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Keybinding&lt;/h2&gt;
&lt;p&gt;Most command keybinding can be found in this &lt;a href="https://gist.github.com/drkarl/4c503bccb62558dc85e8b1bc0f29e9cb" title="Cheat sheet"&gt;cheat sheet&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Android sync&lt;/h2&gt;
&lt;p&gt;Notes can be synced using GitHub.
To sync GitHub repo, &lt;a href="https://github.com/maks/MGit" title="Mgit"&gt;Mgit&lt;/a&gt; can be used.
For markdown viewer, using &lt;a href="https://github.com/gsantner/markor" title="Markor"&gt;Markor&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Better Indexes For Vim Wiki&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Settings&lt;/li&gt;
&lt;li&gt;View Mode&lt;/li&gt;
&lt;li&gt;Inject -&amp;gt; body&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Vim Configuration&lt;/h2&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Plug &lt;span class="s1"&gt;&amp;#39;vimwiki/vimwiki&amp;#39;&lt;/span&gt; 

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_syntax &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_ext &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; executable&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vimwiki_markdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_custom_wiki2html &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vimwiki_markdown&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_template_path &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~/project/wiki/template/&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_automatic_nested_syntaxes &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_list &lt;span class="p"&gt;=&lt;/span&gt; [
      \ {&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;}&lt;span class="p"&gt;,&lt;/span&gt;
      \ {&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;language/py/&amp;#39;&lt;/span&gt;}&lt;span class="p"&gt;,&lt;/span&gt;
      \ {&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;rust&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;language/rs/&amp;#39;&lt;/span&gt;}&lt;span class="p"&gt;,&lt;/span&gt;
      \ {&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;software&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;software/&amp;#39;&lt;/span&gt;}&lt;span class="p"&gt;,&lt;/span&gt;
      \ ]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_links_space_char &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_dir_link &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimwiki_diary_rel_path &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dairy_&amp;#39;&lt;/span&gt;.hostname&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="vim"></category><category term="vim"></category><category term="plugin"></category></entry><entry><title>Weirdness of S3 List Permission</title><link href="https://sak96.github.io/weirdness-of-s3-list-permission.html" rel="alternate"></link><published>2021-06-20T00:00:00+01:00</published><updated>2021-06-20T00:00:00+01:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2021-06-20:/weirdness-of-s3-list-permission.html</id><summary type="html">&lt;p&gt;Understand Weirdness in S3 List permission model.&lt;/p&gt;</summary><content type="html">&lt;!-- cspell:ignore googlefu,duckduckgo --&gt;

&lt;h2&gt;S3 is flat&lt;/h2&gt;
&lt;p&gt;S3 is one of the file storage service available in the "Cloud".
The common way the file are stored is using folder hierarchies.
But S3 does not use hierarchies to store files.
Instead all files are stored in flat structure.
There are no folders, only key value pairs of path and content of file.&lt;/p&gt;
&lt;p&gt;Most interface designs try to maintain consistency with folder hierarchies.
This is done by using &lt;code&gt;/&lt;/code&gt; as delimiter for folder names.
This allows user to carry on his life, as if, he was using folder hierarchies.
But interestingly, forgetting that S3 is flat may not be entirely good.&lt;/p&gt;
&lt;h2&gt;S3 List Operation&lt;/h2&gt;
&lt;p&gt;Listing file in normal folder hierarchy is trivial to imagine.
List all the file and folder children of given folder.&lt;/p&gt;
&lt;p&gt;But in case of flat hierarchy it becomes interesting.
There are no folder to list, so what constitutes a list operation?
The ideal answer would be, to map to what would have happened it were folder hierarchy.&lt;/p&gt;
&lt;p&gt;So List operation would show all files/folder starting with certain prefix.
Where files would start with the prefix and does not contain a '/'.
Where as folders would start with the prefix and end with a '/'.
This seems to match what we would have expected from folder hierarchy.&lt;/p&gt;
&lt;h2&gt;S3 List Permission&lt;/h2&gt;
&lt;p&gt;Consider a case where you are storing home directories of user to s3.
You would want the user to only able to read,write and &lt;strong&gt;list&lt;/strong&gt; his own home.
Also the home folder name is same as user name.&lt;/p&gt;
&lt;p&gt;If you googlefu is strong enough you may end up &lt;a href="https://web.archive.org/web/20201112042023/https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_home-directory-console.html"&gt;here&lt;/a&gt;.
I prefer duckduckgo so, I typed &lt;code&gt;!aws IAM users S3 home&lt;/code&gt; and picked the first result.
&lt;code&gt;!aws&lt;/code&gt; searches for aws docs, this is bang search from duckduckgo, more &lt;a href="https://duckduckgo.com/bang"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You might feel that computer security gods and smiling on you.
And yes, they are!
But not in the way you would hope, not for you happiness.
They are, in fact, laughing (not just smiling) at you as you walk into the pit.&lt;/p&gt;
&lt;p&gt;This article is interested in list operation, So, let ignore all other operation.
Below is the json permission for managing list operation from &lt;a href="https://web.archive.org/web/20201112042023/https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_home-directory-console.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s3:ListBucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;arn:aws:s3:::bucket-name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Condition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;StringLike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;s3:prefix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;home/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;home/${aws:username}/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;So the recommended way to restrict list operation is to use &lt;code&gt;s3:prefix&lt;/code&gt; condition.
This means restriction is entirely based on prefixes.&lt;/p&gt;
&lt;p&gt;Now let us analyze each prefix one by one.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;prefix&lt;/th&gt;
&lt;th&gt;use&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;""&lt;/td&gt;
&lt;td&gt;to list root directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"home/"&lt;/td&gt;
&lt;td&gt;to list all directory in home&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"home/${aws:username}/*"&lt;/td&gt;
&lt;td&gt;list any thing is user's own home&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: &lt;code&gt;${aws:username}&lt;/code&gt; is to map every user's home directory name to user name.&lt;/p&gt;
&lt;p&gt;Now let go back to what exactly list does.
&lt;strong&gt;List operation would show all files/folder starting with certain prefix&lt;/strong&gt;.
So everything is fine, correct ?
There should be no issue with this.&lt;/p&gt;
&lt;p&gt;No, Interface just hides flat structure of the storage.
But we also have recursive listing in folder structure.
Imagine, What happens if you use the same here, but on &lt;strong&gt;prefix&lt;/strong&gt; ?
In particular with &lt;strong&gt;home/&lt;/strong&gt; or &lt;strong&gt;""&lt;/strong&gt; ?&lt;/p&gt;
&lt;p&gt;You should be able to see all file beginning with "home/" or "".
This means you should also be able to see "home/some_other_user/..." in the list.
This is exactly what happens, meaning you can see all files in other's home directory.
This may not be a issue as they cannot still read or write the files.&lt;/p&gt;
&lt;h2&gt;My Story with List Permission&lt;/h2&gt;
&lt;p&gt;The above issue was something I had already in my mind when I was framing the policy.
We decided to go with following list permission in the policy.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s3:ListBucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;arn:aws:s3:::bucket-name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Condition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;StringLike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;s3:prefix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home/${aws:username}/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;When the policy was used and there were issue, Some of list operation failed.
Many user were using &lt;code&gt;home/${aws:username}&lt;/code&gt;, without trailing &lt;code&gt;/&lt;/code&gt;.
This means a lot changes had to be done to comply with this policy.
So we decided to allow the path without trailing &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s3:ListBucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;arn:aws:s3:::bucket-name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Condition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;StringLike&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;s3:prefix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home/${aws:username}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;home/${aws:username}/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Seems ok, there should be no issues, right?
It did seem to work well, when we tested again.
All scripts worked as expected.
But, it had a serious security draw back.&lt;/p&gt;
&lt;p&gt;Just imagine if you had two user &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;user_with_user_prefix&lt;/code&gt;.
And now what happens if &lt;code&gt;user&lt;/code&gt; list for his home without &lt;code&gt;/&lt;/code&gt;.
And yeah user can do it recursively.
This list &lt;code&gt;user_with_user_prefix&lt;/code&gt;'s home contents as well.&lt;/p&gt;
&lt;p&gt;Note, This might not be problem if you have constant length strings for username.
For example in this &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_cognito-bucket.html"&gt;aws docs&lt;/a&gt;, similar policy is shown.
By my understanding, these &lt;code&gt;${cognito-identity.amazonaws.com:sub}&lt;/code&gt; are all same length.
Which means there cannot be sub-string of one another.
In other words, sanitize user input, even user names.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Never hurry, especially a security related activity. It's ok to be slow.&lt;/li&gt;
&lt;li&gt;Some times, Concentrate concepts may be better then abstract interface.&lt;/li&gt;
&lt;li&gt;Repeat, Thinking in terms of flat structure &lt;code&gt;&amp;gt;&lt;/code&gt; folder hierarchy interface.&lt;/li&gt;
&lt;li&gt;Sanitize user input may be a good idea.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://duckduckgo.com/bang"&gt;bang&lt;/a&gt; to search faster.&lt;/li&gt;
&lt;/ol&gt;</content><category term="stories"></category><category term="story"></category><category term="s3"></category><category term="security"></category></entry><entry><title>Rust: Ownership</title><link href="https://sak96.github.io/rust-ownership.html" rel="alternate"></link><published>2020-12-20T00:00:00+00:00</published><updated>2020-12-20T00:00:00+00:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-12-20:/rust-ownership.html</id><summary type="html">&lt;p&gt;This article provide my understanding of rust ownership concept.&lt;/p&gt;</summary><content type="html">&lt;!-- cSpell:ignore sbrk, malloc --&gt;

&lt;p&gt;This article explains my understanding of rust ownership concepts.
Article will only give simplistic overview and might not hold water in all cases.&lt;/p&gt;
&lt;h2&gt;Memory Management&lt;/h2&gt;
&lt;p&gt;Program (or Software) is set of instruction, followed by machine to solve some problem.
Some instruction may be based on output of instruction executed in the past.
So the program needs to store output instruction for use by later instructions.
The storage is called memory (or state) of program.&lt;/p&gt;
&lt;p&gt;But typical machines run more than one program simultaneously or interleaving-ly.
So memory needs to be managed between programs.
This herculean task is undertaken by the operating system through system calls (brk/sbrk).&lt;/p&gt;
&lt;p&gt;Programing Language provide abstraction over these memory management calls (sbrk/brk).
Few Approach are briefed below.&lt;/p&gt;
&lt;h3&gt;Programmer Specified&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: C&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Programer uses &lt;strong&gt;malloc&lt;/strong&gt; to ask for memory and &lt;strong&gt;free&lt;/strong&gt; to free the memory.
These function are abstraction on top of brk/sbrk system calls.
This provides greater control which comes with possibility making mistakes.&lt;/p&gt;
&lt;p&gt;If you free memory when it is in use, it is called &lt;strong&gt;use after free&lt;/strong&gt;.
If you free memory when it is in already freed it is called &lt;strong&gt;double free&lt;/strong&gt;.
These things can cause program to behave weirdly (could be exploited).&lt;/p&gt;
&lt;h3&gt;Runtime Assisted&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Program is run on top of a runtime which manages memory on behalf of the program.&lt;/p&gt;
&lt;p&gt;The most common way is keep &lt;strong&gt;count of references&lt;/strong&gt; to memory.
When variable reference a memory it count is incremented.
When this variable is no longer in use the memory count is decremented.
When reference count goes to zero that means no one is referencing the memory.
This means memory can be freed.&lt;/p&gt;
&lt;p&gt;But there is issue of &lt;strong&gt;cycle&lt;/strong&gt; that is two references referencing each other.
Which means that there reference count is never going back to zero.
To resolve this, runtime regularly check for such references by stopping the program.
The program is stopped to avoid updating of reference count during the check.
These are the infamous &lt;strong&gt;Stop the World&lt;/strong&gt; pauses.&lt;/p&gt;
&lt;p&gt;This means runtime add negatively to performance.
Any improvement to performance will require understanding of runtime.
Most common issues is variable accidentally holding to data which is no longer required
(&lt;em&gt;closures&lt;/em&gt; which hold references large data, which is kept but never going to executed).&lt;/p&gt;
&lt;h3&gt;Compiler Assisted&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: Rust&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compiler analyses the code and inserts memory management code at appropriate position.&lt;/p&gt;
&lt;p&gt;The most common way is to do a &lt;strong&gt;life time analysis&lt;/strong&gt; of variable.
Compiler checks for usage of variable (usually the reference) in code.
If the variable is not used after certain point compiler inserts &lt;em&gt;free&lt;/em&gt; logic there.&lt;/p&gt;
&lt;p&gt;One way to implement this is by creating a copy of variable on each reference.
This way the chain of reference is linear and can be dropped once variable is dropped.
But this may lead to large memory consumptions.
One of the other ways is Rust ownership model.&lt;/p&gt;
&lt;h2&gt;Ownership&lt;/h2&gt;
&lt;h3&gt;Why Ownership?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Life time analysis&lt;/em&gt; requires to determine all runtime reference at compile time.
This is hard problem as you need to analysis all possible runtime outcomes.&lt;/p&gt;
&lt;p&gt;Having protocol to allow programmer to restrict unwanted outcomes can help the analysis.
This restricts number of runtime outcomes and hence reduces compiler's work.
This protocol is the rust ownership model.&lt;/p&gt;
&lt;h3&gt;What is Ownership?&lt;/h3&gt;
&lt;p&gt;Ownership is a concept where a memory is linked to a owner (variable).
This allows compiler to free the memory when owner is no longer in use.
When a owner is no longer in use we call it is &lt;strong&gt;out of scope&lt;/strong&gt;.
In short, Ownership is assigning memory's life time to life time of it's owner.&lt;/p&gt;
&lt;p&gt;This concept seems simple but is very constraining for programmers.
To provide flexibility concepts like &lt;strong&gt;move&lt;/strong&gt; and &lt;strong&gt;borrow&lt;/strong&gt; are used.&lt;/p&gt;
&lt;h3&gt;What is Move?&lt;/h3&gt;
&lt;p&gt;Move is concept of transferring ownership of memory from one owner to other owner.
This means the memory is not freed when the &lt;em&gt;previous&lt;/em&gt; owner goes &lt;em&gt;out of scope&lt;/em&gt;.
But the memory is freed when the &lt;em&gt;new&lt;/em&gt; owner goes &lt;em&gt;out of scope&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;What is Borrow?&lt;/h3&gt;
&lt;p&gt;Most cases in program we may want to share the memory between two variable.
This means we may want to have &lt;em&gt;two owner&lt;/em&gt; for a memory.
This makes it confusing for the compiler about when to free the memory.&lt;/p&gt;
&lt;p&gt;Instead variable are allowed to share by &lt;strong&gt;borrowing&lt;/strong&gt; memory from the owner.
This means there is only one owner for a given memory.
The compiler still frees the memory when owner goes out of scope.
If borrower has access to memory after owner goes out of scope compiler throws error.
This makes sure all borrower have access to valid memory in compiled program.&lt;/p&gt;
&lt;p&gt;Compiler treats borrow differently based on whether it is read only or write.
In &lt;em&gt;read only (immutable)&lt;/em&gt; borrow case there can be multiple borrowers for a memory.
But for &lt;em&gt;write (mutable)&lt;/em&gt; borrow only single borrower is allowed.
This means write borrow also disallows read only borrow and vice versa.&lt;/p&gt;
&lt;p&gt;Reasoning for &lt;em&gt;single mutable borrow&lt;/em&gt; is for safety in case of complex data structures.
Say for a vector write may free internal memory pointed by other borrower.
This leads to the other borrower using freed memory.
Once the mutable borrower goes out of scope the memory is available for re-sharing.&lt;/p&gt;</content><category term="rust"></category><category term="rust"></category><category term="ownership"></category></entry><entry><title>WSL2 with GUI without Admin</title><link href="https://sak96.github.io/wsl2-with-gui-without-admin.html" rel="alternate"></link><published>2020-10-14T00:00:00+01:00</published><updated>2020-10-14T00:00:00+01:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-10-14:/wsl2-with-gui-without-admin.html</id><summary type="html">&lt;p&gt;My experience setting up WSL2 along with problems and solutions&lt;/p&gt;</summary><content type="html">&lt;p&gt;WSL or windows subsystem for linux is way to use linux interface on windows machine.
WSL2 comes with better support for filesystem and network for linux interface.
Previous &lt;a href="https://sak96.github.io/wsl1-with-xserver-without-admin.html"&gt;Article&lt;/a&gt; describes wsl1 setup.&lt;/p&gt;
&lt;p&gt;WSL2 solves the &lt;a href="https://discourse.ubuntu.com/t/ubuntu-20-04-and-wsl-1/15291" title="Ubuntu sleep"&gt;sleep issue&lt;/a&gt; in Ubuntu wsl with updated glibc.
WSL2 comes with not only comes with pros but also it's own share of issues.
For WSL2 using Ubuntu 20.04 seemed easy, keeping WSL1 Debian setup as my backup.
This Article walk through various problem faced and solutions if found.&lt;/p&gt;
&lt;h2&gt;VPN and MTU&lt;/h2&gt;
&lt;p&gt;VPN MTU was less that the WSL2 eth0 network interface.
This caused network connection to hang on large transfers, more detail &lt;a href="https://github.com/microsoft/WSL/issues/5068#issuecomment-683917384" title="MTU VPN issue"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The VPN MTU can be accessed using following command.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;netsh interface ipv4 show subinterface
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Setting same mtu to eth0 can be done as follows.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ip link &lt;span class="nb"&gt;set&lt;/span&gt; mtu &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;mtu_vpn&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; dev eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Single line command will be as follows.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;%bash&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sudo ip link set mtu $($(wslpath &amp;#39;%windir%\system32&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;etsh.exe&amp;#39;) interface ipv4 show subinterface | $(wslpath &amp;#39;%windir%\system32&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s"&gt;indstr.exe&amp;#39;) /i vpn   | grep -i vpn | sed &amp;#39;s/^\s\+//g&amp;#39;|  cut -f 1 -d &amp;#39; &amp;#39;) dev eth0&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Network and GUI&lt;/h2&gt;
&lt;p&gt;Using &lt;a href="https://sourceforge.net/projects/vcxsrv/" title="Visual C++ X server"&gt;vcXsrv&lt;/a&gt; seemed a fair choice for Xserver to use GUI.
WSL2 restricts on using windows Network (localhost) on WSL2.
vcXsrv could no longer be assessed by WSL2 for displaying GUI.
Admin was required to add firewall allow rule to allow such connection.&lt;/p&gt;
&lt;p&gt;Solution was to use &lt;code&gt;socat&lt;/code&gt; to connect from WSL2 to Windows as mentioned &lt;a href="https://github.com/microsoft/WSL/issues/4619#issuecomment-678652118" title="Socat WSL2 to Windows"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install socat in ubuntu using &lt;code&gt;apt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Download socat for window from &lt;a href="https://sourceforge.net/projects/unix-utils/files/socat/" title="Socat for windows"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Set Downloaded socat path in &lt;code&gt;%socat%&lt;/code&gt; varrable and run below command in cmd.&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;start &lt;span class="s2"&gt;&amp;quot;socat&amp;quot;&lt;/span&gt; /min  ubuntu2004.exe -c &lt;span class="s2"&gt;&amp;quot;socat UNIX-LISTEN:/tmp/.X11-unix/X0,fork exec:\&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wslpath &lt;span class="s1"&gt;&amp;#39;%socat%&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - TCP\:localhost\:6000\&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Xserver to Xrdp&lt;/h2&gt;
&lt;p&gt;The above solution was slow. The other solution was to use ssh tunnel or use Xrdp.
Install Xrdp and running it was simple, but automating is a challenge to be done.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Installation Command&lt;/span&gt;
sudo apt install --no-install-recommends xrdp

&lt;span class="c1"&gt;# Starting Service (Yet to automate)&lt;/span&gt;
service xrdp start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Found a better way to use run start the service.
You can open run menu from &lt;code&gt;Win+r&lt;/code&gt;.
Type &lt;code&gt;shell:startup&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt;.
Add a bat file to start xrdp at startup.
Note: sleep is required other wise xrdp does not startup&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wsl sudo service xrdp start&lt;span class="p"&gt;;&lt;/span&gt; sleep &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Rdp using the ip address. More details &lt;a href="https://stackoverflow.com/a/26694162" title="Get Ip Address"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ip -4 addr show eth0 &lt;span class="p"&gt;|&lt;/span&gt; grep -oP &lt;span class="s1"&gt;&amp;#39;(?&amp;lt;=inet\s)\d+(\.\d+){3}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;
Found a better way to use run the above command.
I had rdp connection file from my last connection say &lt;code&gt;~/rdp.rdp&lt;/code&gt;.
The following command open rdp connection using the above file from wsl.
You can add this to bat file or add alias to the same.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mstsc.exe /v:&lt;span class="k"&gt;$(&lt;/span&gt;hostname -I&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;wslpath -w ~/rdp.rdp&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Xrdp and Sound&lt;/h2&gt;
&lt;p&gt;To use sound on Xrdp with pulseaudio, some libraries are required.
Copying the library from &lt;a href="https://github.com/DesktopECHO/xWSL" title="Xrdp PulseAudio"&gt;here&lt;/a&gt; helped.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# adding libraries&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DesktopECHO&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xWSL&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;xWSL&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xrdp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pulseaudio&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;installer&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;

&lt;span class="c1"&gt;# restarting pulseaudio&lt;/span&gt;
&lt;span class="n"&gt;pulseaudio&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="n"&gt;pulseaudio&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Teams and WSL2&lt;/h2&gt;
&lt;p&gt;Teams is messaging platform by microsoft whose installation instruction are &lt;a href="https://docs.microsoft.com/en-us/microsoftteams/get-clients" title="Ms Teams Install"&gt;here&lt;/a&gt;.
To get working in WSL2 required installation of couple of missing dependencies.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# install teams&lt;/span&gt;
curl https://packages.microsoft.com/keys/microsoft.asc &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
sudo sh -c &lt;span class="s1"&gt;&amp;#39;echo &amp;quot;deb [arch=amd64] https://packages.microsoft.com/repos/ms-teams stable main&amp;quot; &amp;gt; /etc/apt/sources.list.d/teams.list&amp;#39;&lt;/span&gt;
sudo apt update
sudo apt install teams

&lt;span class="c1"&gt;# install missing dependencies&lt;/span&gt;
sudo apt install libsecret-1-0 chromium-codecs-ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Automating at Startup&lt;/h2&gt;
&lt;p&gt;Setting mtu and booting up xrdp every time is annoying.
For mtu setting least value of vpn and network works without trouble.
Xrdp startup command needs a small sleep to ensure that command really worked.&lt;/p&gt;
&lt;p&gt;To make this work open run menu by pressing &lt;code&gt;win&lt;/code&gt; + &lt;code&gt;R&lt;/code&gt;.
Type &lt;code&gt;shell:startup&lt;/code&gt; to open the startup folder.
Add the following script in a file &lt;code&gt;wsl.bat&lt;/code&gt; in the folder.
Replace &lt;code&gt;$least_value&lt;/code&gt; with least value of the mtu.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wsl sudo ip link &lt;span class="nb"&gt;set&lt;/span&gt; mtu &lt;span class="nv"&gt;$least_value&lt;/span&gt; dev eth0&lt;span class="p"&gt;;&lt;/span&gt;
wsl sudo service xrdp&lt;span class="p"&gt;;&lt;/span&gt; sleep &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Make following &lt;code&gt;rdp.bat&lt;/code&gt; file in your desktop for faster launch of rdp.
Double clicking on this file will start cmd program which launches rdp.
The cmd prompt can be closed after some time.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wsl mstsc.exe /v:&lt;span class="k"&gt;$(&lt;/span&gt;hostname -I&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;wslpath -w ~/rdp.rdp&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="wsl"></category><category term="story"></category><category term="wsl"></category><category term="linux"></category></entry><entry><title>WSL1 with Xserver without Admin</title><link href="https://sak96.github.io/wsl1-with-xserver-without-admin.html" rel="alternate"></link><published>2020-08-20T00:00:00+01:00</published><updated>2020-08-20T00:00:00+01:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-08-20:/wsl1-with-xserver-without-admin.html</id><summary type="html">&lt;p&gt;My experience setting up WSL1 along with problems and solutions&lt;/p&gt;</summary><content type="html">&lt;p&gt;WSL or windows subsystem for linux is way to use linux interface on windows machine.
This post is journey of setup of WSL1 environment and not WSL2. 
Two parts that are touched are &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Debian over Ubuntu &lt;/li&gt;
&lt;li&gt;GUI setup&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Debian over Ubuntu&lt;/h1&gt;
&lt;p&gt;Ubuntu 20.04 had few bugs when on WSL1.
Ubuntu 18.04 came with python2.
Debian 10.5 was slim, was easy to install firefox-esr.&lt;/p&gt;
&lt;h2&gt;Size&lt;/h2&gt;
&lt;p&gt;Debian was slimmer than both version of Ubuntu.&lt;/p&gt;
&lt;h2&gt;Cannot Sleep&lt;/h2&gt;
&lt;p&gt;In Ubuntu 20.04, glibc version is 2.31 which breaks sleep.
Error which shows up is &lt;code&gt;sleep: cannot read realtime clock: Invalid argument&lt;/code&gt;.
According to &lt;a href="https://discourse.ubuntu.com/t/ubuntu-20-04-and-wsl-1/15291" title="Ubuntu sleep"&gt;thread&lt;/a&gt; the fix wait for microsoft wsl patch.
It mentions that Ubuntu 18.04 in WSL1 or using WSL2 will avoid this.&lt;/p&gt;
&lt;p&gt;In Debian 10.5 WSL in microsoft store the glibc version is older.
Sleep work fine with this version of glibc in WSL1.&lt;/p&gt;
&lt;h2&gt;Python3&lt;/h2&gt;
&lt;p&gt;One of the main reason of not using Ubuntu 18.04 is it comes with python2.
Debian 10.5 did not come with python2 hence no major headache on this part.&lt;/p&gt;
&lt;p&gt;Though you could set your /bin/python to python3 (and pip) as follows&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# For Ubuntu&lt;/span&gt;
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 &lt;span class="m"&gt;2&lt;/span&gt;
sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Firefox&lt;/h2&gt;
&lt;p&gt;In Debian WSL installing and installing firefox-esr worked without issue.
There were few issue in case of Ubuntu 20.04 but not sure of Ubuntu 18.04.
Also Ubuntu requires you to add repository to use firefox-esr.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# For Ubuntu&lt;/span&gt;
sudo apt install --no-install-recommends software-properties-common
sudo add-apt-repository ppa:mozillateam/ppa
sudo apt update
sudo apt install --no-install-recommends firefox-esr 
sudo update-alternatives --install /usr/bin/firefox firefox /usr/bin/firefox-esr &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Downside&lt;/h2&gt;
&lt;p&gt;Debian 10.5 contains vim and neo vim version do not play well with popup handling.
Also i3status used to fail continuously with segmentation violation. 
Fix is using deb package for i3status from &lt;a href="https://packages.debian.org/buster/i3status" title="i3 status package"&gt;next version&lt;/a&gt; of Debian.&lt;/p&gt;
&lt;h1&gt;GUI Setup&lt;/h1&gt;
&lt;p&gt;WSL does not ship with xserver. Xserver is what handle GUI. I use &lt;a href="https://sourceforge.net/projects/vcxsrv/" title="Visual C++ X server"&gt;vcXsrv&lt;/a&gt; as Xserver.&lt;/p&gt;
&lt;h2&gt;Working&lt;/h2&gt;
&lt;p&gt;Start vcXsrv which will run Xserver.
Run GUI software like i3 providing the servers details.&lt;/p&gt;
&lt;h2&gt;Non Admin&lt;/h2&gt;
&lt;p&gt;I don't like running softwares as admin even if it is for installation.
In wiki for vcXsrv we have &lt;a href="https://sourceforge.net/p/vcxsrv/wiki/Making%20Portable/" title="portable xcXsrv"&gt;section&lt;/a&gt; to make it portable.
It requires the software to be extracted as 7z file.
Followed by removal of "$PLUGINSDIR" folder.
The extracted path used here is &lt;code&gt;%userprofile%\AppData\Local\VcXsrv\&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Shortcut&lt;/h2&gt;
&lt;p&gt;I wanted to run the server and i3 without on single click.
Simple script crafted by hand is below.&lt;/p&gt;
&lt;p&gt;Note: First run after boot will fail. Kill vcXsrv and retry.&lt;/p&gt;
&lt;p&gt;Setting up variables.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; off
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;command=nohup /usr/bin/i3 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;windowmode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;nodecoration
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;dispnum&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%userprofile%&lt;/span&gt;\AppData\Local\Microsoft\WindowsApps\debian.exe
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;vcxsrvexec&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%userprofile%&lt;/span&gt;\appdata\local\vcxsrv\vcxsrv.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Running the shortcut.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;start&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Xserver&amp;quot;&lt;/span&gt; /D &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;%userprofile%&lt;/span&gt;&lt;span class="s2"&gt;\AppData\Local\VcXsrv\&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;%vcxsrvexec%&lt;/span&gt; &lt;span class="se"&gt;^&lt;/span&gt;
&lt;span class="se"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;%dispnum%&lt;/span&gt; -ac -terminate -lesspointer -&lt;span class="nv"&gt;%windowmode%&lt;/span&gt; -clipboard -wgl &lt;span class="se"&gt;^&lt;/span&gt;
&lt;span class="se"&gt;-&lt;/span&gt;logfile &lt;span class="nv"&gt;%userprofile%&lt;/span&gt;\appdata\local\vcxsrv\vcxsrv.log

&lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;%bash%&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;bash&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%systemroot%&lt;/span&gt;\system32\bash.exe
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;disp&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;localhost:&lt;span class="nv"&gt;%dispnum%&lt;/span&gt;.0
&lt;span class="nv"&gt;%bash%&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;export DISPLAY=&lt;/span&gt;&lt;span class="nv"&gt;%disp%&lt;/span&gt;&lt;span class="s2"&gt;; cd $HOME; &lt;/span&gt;&lt;span class="nv"&gt;%command%&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp; disown&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="wsl"></category><category term="story"></category><category term="wsl"></category><category term="linux"></category></entry><entry><title>Using browser as scratch file editor</title><link href="https://sak96.github.io/using-browser-as-scratch-file-editor.html" rel="alternate"></link><published>2020-07-22T00:00:00+01:00</published><updated>2020-07-22T00:00:00+01:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-07-22:/using-browser-as-scratch-file-editor.html</id><summary type="html">&lt;p&gt;Leveraging data urls to use browser as scratch file editor.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When browsing internet you may find a need to write down some temporary notes. I call it
scratch files. Opening text editor for editing these scratch files is too much pain or
just too much of context swap.&lt;/p&gt;
&lt;h1&gt;In Browser Temporary File Editor&lt;/h1&gt;
&lt;p&gt;Here is the in-browser scratch file editor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data:text/html,&amp;lt;html contenteditable&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go ahead copy paste it to url bar. Bookmark it, if required.&lt;/p&gt;
&lt;h1&gt;The Details&lt;/h1&gt;
&lt;p&gt;To use browser as text editor, I leverage &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" title="data url"&gt;data urls&lt;/a&gt;. Data url are used to
embed small documents into the url. The above url embedded html page which acts as
editor.&lt;/p&gt;
&lt;p&gt;The format is &lt;code&gt;data:[&amp;lt;mediatype&amp;gt;][;base64],&amp;lt;data&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Media type specifies the mime type of file.&lt;/li&gt;
&lt;li&gt;Base 64 is optional and added if data is base64 encoded&lt;/li&gt;
&lt;li&gt;followed by the content of file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our url is &lt;code&gt;data:text/html,&amp;lt;html contenteditable&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mime type is &lt;code&gt;text/html&lt;/code&gt;. We are embedding html page.&lt;/li&gt;
&lt;li&gt;data is html page. The html tag is &lt;code&gt;contenteditable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;No need to close the html tag as it is corrected by browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The content is lost if you close the tab. Try a extensions if you don't want
to lose the contents.&lt;/p&gt;</content><category term="stories"></category><category term="story"></category><category term="browser"></category><category term="file"></category></entry><entry><title>Linux: Passing the input the hard way.</title><link href="https://sak96.github.io/linux-passing-the-input-the-hard-way.html" rel="alternate"></link><published>2020-07-18T00:00:00+01:00</published><updated>2020-07-18T00:00:00+01:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-07-18:/linux-passing-the-input-the-hard-way.html</id><summary type="html">&lt;p&gt;Story of how unix philosophy "everything is a file" saved the day.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For people familiar with unix philosophy, &lt;a href="https://en.wikipedia.org/wiki/Everything_is_a_file" title="everything is a file"&gt;"Everything is a file"&lt;/a&gt; is
common phrase. Rarely do we get a case to use it in practice. This is one of those cases.&lt;/p&gt;
&lt;h1&gt;Problem&lt;/h1&gt;
&lt;p&gt;At work a pipeline which had to be run by &lt;code&gt;End of Day&lt;/code&gt;, got stuck. After checking the
logs, it looked like it was stuck waiting for a input prompt. The Prompts was suppose to
be bypassed by setting environment variable. But recent changes had introduced a flaw.&lt;/p&gt;
&lt;p&gt;The patch would take some time and this was a lengthy pipeline. So, we had to manually
resume it. But the prompt was not directly available, as this was a process which was
deeply nested within pipeline logic.&lt;/p&gt;
&lt;h1&gt;Solution in theory&lt;/h1&gt;
&lt;p&gt;"Everything is a file" in unix. This includes directories, devices and even process.
We leverage this fact to provide input to the process.&lt;/p&gt;
&lt;p&gt;Process are directories under &lt;code&gt;/proc/&lt;/code&gt; directory. Pid is unique number assigned to the
process. These are used to name the process directory. Ex: &lt;code&gt;/proc/1234/&lt;/code&gt; is directory
representing process with pid &lt;code&gt;1234&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In each process directory, files opened by the process are stored in &lt;code&gt;fd/&lt;/code&gt; directory.
File descriptors are numbers assigned to files unique to that process. These are used to
name the files. Ex: &lt;code&gt;/proc/1234/fd/0&lt;/code&gt; is file associated with file descriptors 0 of
process with pid &lt;code&gt;1234&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In normal cases file descriptor one is standard input or the file which is the prompt of
the process. This was true in our case.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: There are to many interesting thing here to cover but lets concentrate on the
solution.&lt;/p&gt;
&lt;h1&gt;Implemented Solution&lt;/h1&gt;
&lt;p&gt;To demonstrate, let us use &lt;code&gt;cat&lt;/code&gt; program.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;cat&lt;/code&gt; in a terminal. It wait for input.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;echo "Hello World" &amp;gt;&amp;gt; "/proc/$(pidof -s cat)/fd/1"&lt;/code&gt; to input to &lt;code&gt;cat&lt;/code&gt; program.&lt;/li&gt;
&lt;/ol&gt;</content><category term="stories"></category><category term="story"></category><category term="linux"></category><category term="file"></category></entry><entry><title>Git Simplified (Part 1): Introduction</title><link href="https://sak96.github.io/git-simplified-part-1-introduction.html" rel="alternate"></link><published>2020-04-29T00:00:00+01:00</published><updated>2020-04-29T00:00:00+01:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-04-29:/git-simplified-part-1-introduction.html</id><summary type="html">&lt;p&gt;This article provides introduction to git internals.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Articles&lt;/h2&gt;
&lt;p&gt;This article is part of series which provides introduction to git internals.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://sak96.github.io/git-simplified-part-1-introduction.html"&gt;Git: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Git is the stupid &lt;code&gt;content tracker&lt;/code&gt; (as per it's &lt;a href="https://linux.die.net/man/1/git" title="git man page"&gt;man page&lt;/a&gt;).
As a content tracker it tracks the modification of done to content.
It acts like a diary for how/when/where content got modified.&lt;/p&gt;
&lt;p&gt;This help to enabled the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Track Ownership of changes.&lt;/li&gt;
&lt;li&gt;Backup and Restore to certain older point.&lt;/li&gt;
&lt;li&gt;Synchronization changes between multiple contents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git keeps track of the whole system as &lt;strong&gt;Directed Acyclic Graph of Hashes of commits&lt;/strong&gt;.
Each hash represents a commit or state of content at given time.
Lets dig bit deeper about the graph part.&lt;/p&gt;
&lt;h2&gt;Directed Acyclic Graph&lt;/h2&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;grandparent&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Graph&lt;/em&gt; is structure which represents relation between objects using connection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The object in this case is &lt;em&gt;commits&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The relationship in this case is &lt;em&gt;parent-child&lt;/em&gt; relationship.&lt;/li&gt;
&lt;li&gt;There relation can be many to many.&lt;/li&gt;
&lt;li&gt;Multiple child can share single parent.&lt;/li&gt;
&lt;li&gt;Single child may be created by Multiple parents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Directed&lt;/em&gt; refers to the fact that these relationships have a direction.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The direction in this case is from child to parent.&lt;/li&gt;
&lt;li&gt;The arrow head points to the direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Acyclic&lt;/em&gt; means the graph does not have cycles or loops.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More information at &lt;a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph" title="Wikipedia: DAG"&gt;wiki&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hash&lt;/h2&gt;
&lt;p&gt;The Directed Acyclic Graph is made of Hashes.
Hash function map variable size input to fixed size output.
Here each content has different size, you hash them you to get fixed sized output.
The fixed sized output is the hash of the input.&lt;/p&gt;
&lt;p&gt;Cryptographic Hashes are hash which are hard to reverse.
You cannot guess input from getting output of the hash.
In case of git &lt;em&gt;sha-1&lt;/em&gt; is used for hashing.
In recent version &lt;em&gt;sha-256&lt;/em&gt; is used as per &lt;a href="https://git-scm.com/docs/hash-function-transition/2.18.0" title="Hashes"&gt;hash function transition article&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Commit&lt;/h2&gt;
&lt;p&gt;The snapshot of content at any point of time is called commit.
Even though content refers to folder level of content.
The changes are maintained at file level.
So the commit contains details of these changes.
More about commit will be covered in next chapter.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Git: &lt;a href="https://linux.die.net/man/1/git" title="git man page"&gt;Stupid Content Tracker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4XpnKHJAok8" title="Torvalds on git"&gt;Tech Talk: Linus Torvalds on git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph" title="Wikipedia: DAG"&gt;wiki: Directed acyclic graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/hash-function-transition/2.18.0" title="Hashes"&gt;Hash Function Transition&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="git series"></category><category term="version"></category><category term="git"></category><category term="information"></category></entry><entry><title>My Notes: Debugging And Patching Docker</title><link href="https://sak96.github.io/my-notes-debugging-and-patching-docker.html" rel="alternate"></link><published>2020-02-29T00:00:00+00:00</published><updated>2020-02-29T00:00:00+00:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-02-29:/my-notes-debugging-and-patching-docker.html</id><summary type="html">&lt;p&gt;This article provide some notes for debugging and patching docker.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Containerization of software and services allows easy deployment, portability and many other benefits. Docker is one of wide-spread adopted technology used for containerization. I use docker while on work. There are many guide and articles about using and debugging docker. Here is my guide for debugging and patching docker. And link to &lt;a href="#Resources"&gt;resources&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Terminologies.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Docker: software used for containerization.&lt;/li&gt;
&lt;li&gt;Image: snapshot of container.&lt;/li&gt;
&lt;li&gt;Container: running instance of image.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Information Gathering.&lt;/h1&gt;
&lt;p&gt;The first stage of any debugging session is gathering information. Skipping this steps may lead to spending hours on issue which may have been resolved in minutes.&lt;/p&gt;
&lt;h2&gt;Container inspection.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get all running container.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;List all containers (running, created, exited, ...).&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Filter container list (say status=exited).&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker ps -a -f &lt;span class="s2"&gt;&amp;quot;status=exited&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Get container logs.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker logs &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Get more information on the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker container inspect &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Images inspection.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;List all docker images.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Get more information on the image.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker image inspect &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Format output into JSON.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get names of exited container.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker ps -a -f &lt;span class="s2"&gt;&amp;quot;status=exited&amp;quot;&lt;/span&gt; --format &lt;span class="s2"&gt;&amp;quot;{{json .Names}}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h1&gt;Live Debugging.&lt;/h1&gt;
&lt;p&gt;Once information is gathered, we may need to tweak the container or live-debug. Most of these cases may require us to get a shell on the docker. The method of getting a shell may differ based on weather docker is running or docker has exited.&lt;/p&gt;
&lt;h2&gt;Docker is running.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Exec into the shell (bash or sh or other shell).&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; /bin/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Run command &lt;code&gt;ls ./&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; -t &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; ls ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Docker has exited.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get image, tag pair for exited container.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker ps -f &lt;span class="s2"&gt;&amp;quot;name=&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --format &lt;span class="s2"&gt;&amp;quot;{{json .Image}}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Run image to get shell.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker run -it --entrypoint sh &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Run command &lt;code&gt;ls ./&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker run -it --entrypoint ls &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h1&gt;Post Debugging.&lt;/h1&gt;
&lt;p&gt;After figuring out the issue, You may want to patch the environment or rollback and also do some basic cleanup. Rollback would be to tag previous tag to latest. In case previous tag is not available (as it is first deployment) or the version has some specific changes which cannot be reverted and patch release may take time, then docker needs to be patched.&lt;/p&gt;
&lt;h2&gt;Rollback.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tag latest to previous version&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker tag &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_previous_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Patch.&lt;/h2&gt;
&lt;p&gt;Patching depends on the method used for debugging. In case of running container you can just commit it. For exited container which was run using custom entry point, entry point is overwritten. So the patching required to revert the entry point.&lt;/p&gt;
&lt;h3&gt;Docker was exec-ed.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Commit the live-debugging container.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker container commit &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;-patched
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Kill the live-debugging container&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker container &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Tag the patched version to latest.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker tag &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;-patched &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Bring the latest service docker up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Docker was exec-ed (entry point has changed).&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Find the old entry point&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker image inspect &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --format &lt;span class="s2"&gt;&amp;quot;Entrypoint {{json .Config.Entrypoint}}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Find the old cmd&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker image inspect &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --format &lt;span class="s2"&gt;&amp;quot;CMD {{json .Config.Cmd}}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Commit the docker with the old entry point and cmd&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker container commit -change&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$old_entrypoint&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --change&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$old_cmd&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;-patched
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Kill the live-debugging container&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker container &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$container_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Tag the patched version to latest.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker tag &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_tag&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;-patched &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$image_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Bring the latest service docker up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Cleaning up.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Delete exited container. You can use -q instead of --format flag part for getting only ids.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker ps -a -f &lt;span class="s2"&gt;&amp;quot;status=exited&amp;quot;&lt;/span&gt; --format &lt;span class="s2"&gt;&amp;quot;{{json .Names}}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs -r docker rm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Delete untagged images.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;user@host$ &lt;/span&gt;docker images prune
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h1&gt;Tips.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;-q&lt;/code&gt; for quiet mode on command provides only image ids or container ids. &lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;docker cp&lt;/code&gt; can help in file transfer to and from container.
    - &lt;code&gt;docker cp  "$container_name":"$container_file_path" "local_file_path"&lt;/code&gt; -&amp;gt; from
        container.
    - &lt;code&gt;docker cp  "local_file_path" "$container_name":"$container_file_path"&lt;/code&gt; -&amp;gt; to 
        container.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Resources.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/ps/"&gt;&lt;code&gt;docker ps&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/images/"&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/image_inspect/"&gt;&lt;code&gt;docker image inspect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/container_inspect/"&gt;&lt;code&gt;docker container inspect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/logs/"&gt;&lt;code&gt;docker logs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/container_exec/"&gt;&lt;code&gt;docker container exec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/run/"&gt;&lt;code&gt;docker run&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/container_commit/"&gt;&lt;code&gt;docker container commit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/image_prune/"&gt;&lt;code&gt;docker image prune&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/config/formatting/"&gt;&lt;code&gt;--format&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/cp/"&gt;&lt;code&gt;docker cp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="patching"></category><category term="debugging"></category><category term="docker"></category></entry><entry><title>Summary: "What nobody tells you about documentation"</title><link href="https://sak96.github.io/summary-what-nobody-tells-you-about-documentation.html" rel="alternate"></link><published>2020-02-22T00:00:00+00:00</published><updated>2020-02-22T00:00:00+00:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-02-22:/summary-what-nobody-tells-you-about-documentation.html</id><summary type="html">&lt;p&gt;This article tries to summaries "What nobody tells you about documentation"&lt;/p&gt;</summary><content type="html">&lt;p&gt;The article &lt;a href="https://www.divio.com/blog/documentation"&gt;"What nobody tells you about documentation"&lt;/a&gt; details on writing manuals for software. It provides details of different it's components, their intent, content, scope and purpose. This simplifies the process by helping writer have right mindset.&lt;/p&gt;
&lt;h2&gt;Types of Documentation.&lt;/h2&gt;
&lt;h3&gt;Tutorial.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Example: README.&lt;/li&gt;
&lt;li&gt;Level: beginner.&lt;/li&gt;
&lt;li&gt;Orientation: to learn.&lt;/li&gt;
&lt;li&gt;Purpose: practical + to study.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;* Apply:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Doorway to your software for any user (setup/installation should be included).&lt;/li&gt;
&lt;li&gt;Multiple tasks (task: short set of steps).&lt;/li&gt;
&lt;li&gt;Contains simple tasks.&lt;/li&gt;
&lt;li&gt;Rewards user with knowledge.&lt;/li&gt;
&lt;li&gt;Must work 100% (makes user confident).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;* Avoid:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Need not use best practice if not required (complicates process).&lt;/li&gt;
&lt;li&gt;Do not explain beyond what is required (makes tutorial long).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to guides.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Example: how to print integer.&lt;/li&gt;
&lt;li&gt;Level: intermediate.&lt;/li&gt;
&lt;li&gt;Orientation: goal.&lt;/li&gt;
&lt;li&gt;Purpose: practical + for work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;* Apply:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Must be working (can be part of test-cases).&lt;/li&gt;
&lt;li&gt;Contains good heading (possible search phrase).&lt;/li&gt;
&lt;li&gt;Should be flexible (include small variation).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;* Avoid:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Should not explain more (link to API documentation).&lt;/li&gt;
&lt;li&gt;Need not have set up or installation steps (intermediate level).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Explanation.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Example: API docs.&lt;/li&gt;
&lt;li&gt;Level: experienced.&lt;/li&gt;
&lt;li&gt;Orientation: technical details.&lt;/li&gt;
&lt;li&gt;Purpose: theory + to study.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;* Apply:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Should be code based (auto generate is better).&lt;/li&gt;
&lt;li&gt;Example if required (for edge case which is difficult to describe).&lt;/li&gt;
&lt;li&gt;Consistent structure (improves readability).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;* Avoid:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Should not explain about design decision (explain what code does, not why).&lt;/li&gt;
&lt;li&gt;Should not be goal oriented (put it in how to guide).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Reference.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Example: white paper.&lt;/li&gt;
&lt;li&gt;Level: advanced expert.&lt;/li&gt;
&lt;li&gt;Orientation: to inform.&lt;/li&gt;
&lt;li&gt;Purpose: theory + working.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;* Apply:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Contains design decision (including alternatives).&lt;/li&gt;
&lt;li&gt;Provides historical reasons.&lt;/li&gt;
&lt;li&gt;States good practices.&lt;/li&gt;
&lt;li&gt;Includes discussion or exploration contents. &lt;/li&gt;
&lt;/ul&gt;</content><category term="summary"></category><category term="writing"></category><category term="documentation"></category><category term="programming"></category></entry><entry><title>Summary: "Write An Excellent Programming Blog"</title><link href="https://sak96.github.io/summary-write-an-excellent-programming-blog.html" rel="alternate"></link><published>2020-02-15T00:00:00+00:00</published><updated>2020-02-15T00:00:00+00:00</updated><author><name>sak96</name></author><id>tag:sak96.github.io,2020-02-15:/summary-write-an-excellent-programming-blog.html</id><summary type="html">&lt;p&gt;This article tries to summaries "Write An Excellent Programming Blog"&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://bit.ly/excellent-blog"&gt;"Write An Excellent Programming Blog"&lt;/a&gt; talks about how to write tech-based articles. The Article categories articles, and details about how to write articles for given category, which provides guidelines for beginners to write articles.&lt;/p&gt;
&lt;h2&gt;Types of articles.&lt;/h2&gt;
&lt;h3&gt;* Story.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Series of steps in event.&lt;/li&gt;
&lt;li&gt;Moral of event.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;* Opinion.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;State hypothesis.&lt;/li&gt;
&lt;li&gt;Provide evidence for hypothesis.&lt;/li&gt;
&lt;li&gt;Response to possible question.&lt;/li&gt;
&lt;li&gt;Restate the hypothesis.&lt;/li&gt;
&lt;li&gt;Note: Do not hurt feeling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;* How to Guides.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Doing x is good for y problem.&lt;/li&gt;
&lt;li&gt;Step for doing x.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;* How things work.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pick thought-provoking subject, say x.&lt;/li&gt;
&lt;li&gt;Explain how x works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;* Review.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I used x.&lt;/li&gt;
&lt;li&gt;State your experience.&lt;/li&gt;
&lt;li&gt;State Strength vs Weakness.&lt;/li&gt;
&lt;li&gt;Have conclusion (using some criteria).&lt;/li&gt;
&lt;li&gt;Analyze, do not say yes or no.&lt;/li&gt;
&lt;li&gt;Concluded with info useful for reader.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to get audience ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Aggregators.&lt;/li&gt;
&lt;li&gt;Weekly Feeds.&lt;/li&gt;
&lt;li&gt;Do not compete for audience.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to improve ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practice: write, write and write.&lt;/li&gt;
&lt;li&gt;Pull style from your liked authors.&lt;/li&gt;
&lt;li&gt;Read, analyze and apply.&lt;/li&gt;
&lt;li&gt;Get editors or friend review.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to make time to write ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Choose exciting topics.&lt;/li&gt;
&lt;li&gt;Write infrequently.&lt;/li&gt;
&lt;li&gt;Practice with Short Reviews.&lt;/li&gt;
&lt;/ul&gt;</content><category term="summary"></category><category term="writing"></category><category term="articles"></category><category term="programming"></category></entry></feed>